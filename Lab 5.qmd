---
title: "Lab 5"
author: "Jazmin Hernandez"
format: html 
editor: visual
embed-resources: true
---

## Reading in Data

```{r}
library(data.table)
library(dtplyr)
library(dplyr)
library(ggplot2)
met <- read.csv(file.path("~", "Github", "met_all.gz"))
head(met)
```

```{r}
stations <- fread("https://noaa-isd-pds.s3.amazonaws.com/isd-history.csv")
stations <- as.data.frame(stations)
stations$USAF <- as.integer(stations$USAF)
```

```{r}
stations$USAF[stations$USAF == 999999] <- NA
stations$CTRY[stations$CTRY == ""] <- NA
stations$STATE[stations$STATE == ""] <- NA
```

```{r}
stations <- unique(stations[, c('USAF', 'CTRY', 'STATE')])
stations <- stations[!is.na(stations$USAF), ]
head(stations, n = 4)
```

```{r}
# Merging data
merge(
  # Data
  x     = met,      
  y     = stations, 
  # List of variables to match
  by.x  = "USAFID",
  by.y  = "USAF", 
  # Which obs to keep?
  all.x = TRUE,      
  all.y = FALSE
  ) |> nrow()
```

```{r}
stations <- stations[!duplicated(stations$USAF), ]
```

```{r}
# Fixed data dropping duplicate IDs from stations
met <- merge(
  x     = met,      
  y     = stations, 
  by.x  = "USAFID",
  by.y  = "USAF", 
  all.x = TRUE,      
  all.y = FALSE
  )
head(met[, c('USAFID', 'WBAN', 'STATE')], n = 4)
```

## Question 1: Representative station for the US

The three weather stations that best represent continental US are located in California, Arkansas, and Michigan. This makes sense as these states are located at different extremes of the US and would therefore better be representative of weather in the US.

```{r}
# Finding median values
library(dplyr)
library(data.table)
median_weather <- met |>
group_by(USAFID, STATE, CTRY, lat, lon, temp, wind.sp, atm.press) |>
  summarise(
    median_temp = median(temp, na.rm = TRUE),
    median_wind.sp = median(wind.sp, na.rm = TRUE),
    median_atm.press = median(atm.press, na.rm = TRUE)
  )
head(median_weather, 4)
```

```{r}
# Using quantile function 
temp_quantiles <- quantile(median_weather$median_temp, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
wind.sp_quantiles <- quantile(median_weather$median_wind.sp, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
atm.press_quantiles <- quantile(median_weather$median_atm.press,probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
print(temp_quantiles)
print(wind.sp_quantiles)
print(atm.press_quantiles)

```

```{r}
# Three weather stations that best represent continental US
rep_stations_temp <- median_weather |>
filter(median_temp <= temp_quantiles[3])
rep_stations_wind.sp <- median_weather |>
filter(median_wind.sp <= wind.sp_quantiles[3])
rep_stations_atm.press <- median_weather |>
filter(median_atm.press <= atm.press_quantiles[3])
```

```{r}
print(head(rep_stations_temp, 3))
print(head(rep_stations_wind.sp, 3))
print(head(rep_stations_atm.press, 3))
```

## Question 2: Representative station per state

The station shown at the lowest latitude is located in Montana, CA.

```{r}
# Calculating euclidean distance
overall_median <- colMeans(median_weather[, c("median_temp", "median_wind.sp", "median_atm.press")], na.rm = TRUE)
met <- median_weather
```

```{r}
median_weather <- median_weather |>
  mutate(
    euclidean_distance = sqrt(
      (median_temp - overall_median[1])^2 + 
      (median_wind.sp - overall_median[2])^2 + 
      (median_atm.press - overall_median[3])^2
    )
  )
```

```{r}
representative_stations_state <- data.frame()


# Find the representative station
for (state in unique(median_weather$STATE)) 
  state_data <- median_weather |>
    filter(STATE == state)
  
  # Get the station with the minimum distance, with a tie-breaker on latitude
  selected_station <- state_data |>
    arrange(euclidean_distance, lat) |>
    slice(1)
```

```{r}
representative_stations_state <- rbind(representative_stations_state, selected_station)
print(representative_stations_state)
```

## Question 3: In the middle?

```{r}
library(data.table)
library(dplyr)
library(leaflet)
# Find mid-point for each state
state_midpoints <- met |>
  group_by(STATE) |>
  summarise(
    mid_lat = mean(lat, na.rm = TRUE),
    mid_long = mean(lon, na.rm = TRUE),
    .groups = 'drop'
  )
print(head(state_midpoints, 5))

```

```{r}
distances <- met |>
inner_join(state_midpoints, by = "STATE") |>
mutate(
distance = sqrt((lat - mid_lat)^2 + (lon - mid_long)^2)  # Calculate Euclidean distance
  ) |>
  select(STATE, USAFID, lat, lon, distance)  # Select relevant columns
```

```{r}
# Closest station to mid-point
library(tidyr)
closest_stations <- distances |>
group_by(STATE) |>
slice(which.min(distance)) |>  
ungroup()
print(head(closest_stations, 5)) 
```

```{r}
all_stations <- bind_rows(
representative_stations_state,
closest_stations
) |>
distinct()  
```

```{r}
library(leaflet)
leaflet(all_stations) |>
addTiles() |>
addCircleMarkers(
    lng = ~lon, 
    lat = ~lat, 
    color = ifelse(all_stations$STATE %in% unique(closest_stations$STATE), "red", "purple"),
    radius = 5,
    label = ~USAFID,
    group = "Stations"
  ) |>
addLegend("bottomright", 
colors = c("black", "blue"), 
labels = c("Closest to Midpoint of State", "Representative Stations"),
title = "Station Types") 
```

## Question 4: Means of means

```{r}
state_summary <- met |>
  group_by(STATE) |>
  summarise(
    avg_temp = mean(temp, na.rm = TRUE),
    avg_wind.sp = mean(wind.sp, na.rm = TRUE),
    avg_atm.press = mean(atm.press, na.rm = TRUE),
    .groups = 'drop'
  )
```

```{r}
state_summary <- state_summary |>
  mutate(
    temp_level = case_when(
      avg_temp < 20 ~ "Low",
      avg_temp >= 20 & avg_temp < 25 ~ "Mid",
      avg_temp >= 25 ~ "High",
      TRUE ~ NA_character_
    )
  )
```

```{r}
#generating rest of summary table
summary_table <- state_summary |>
group_by(temp_level) |>
summarise(
    num_entries = n(),
    num_na_entries = sum(is.na(avg_temp)),
    num_stations = n_distinct(STATE),  # Assuming each State corresponds to one station
    num_states = n(),  # Number of unique states in each temperature level
    mean_temp = mean(avg_temp, na.rm = TRUE),
    mean_wind_speed = mean(avg_wind.sp, na.rm = TRUE),
    mean_atm_pressure = mean(avg_atm.press, na.rm = TRUE),
    .groups = 'drop'
  )
print(summary_table)
```
