---
title: "Assignment 4"
author: "Jazmin Hernandez"
format: html
editor: visual
embed-resources: true 
---

### Make things Run Faster
```{r}
# Total row sums
fun1 <- function(mat) {
  n <- nrow(mat)
  ans <- double(n) 
  for (i in 1:n) {
    ans[i] <- sum(mat[i, ])
  }
  ans
}

fun1alt <- function(mat) {
  rowSums(mat)
}

# Cumulative sum by row
fun2 <- function(mat) {
  n <- nrow(mat)
  k <- ncol(mat)
  ans <- mat
  for (i in 1:n) {
    for (j in 2:k) {
      ans[i,j] <- mat[i, j] + ans[i, j - 1]
    }
  }
  ans
}

fun2alt <- function(mat) {
  t(apply(mat, 1, cumsum))
}
```

## Question 1 
```{r}
# Use the data with this code
set.seed(2315)
dat <- matrix(rnorm(200 * 100), nrow = 200)

# Test for the first
microbenchmark::microbenchmark(
  fun1(dat),
  fun1alt(dat), unit = "relative"
)

# Test for the second
microbenchmark::microbenchmark(
  fun2(dat),
  fun2alt(dat), unit = "relative"
)
```
```{r}
sim_pi <- function(n = 1000, i = NULL) {
  p <- matrix(runif(n*2), ncol = 2)
  mean(rowSums(p^2) < 1) * 4
}

# Here is an example of the run
set.seed(156)
sim_pi(1000) # 3.132
```
```{r}
# This runs the simulation a 4,000 times, each with 10,000 points
set.seed(1231)
system.time({
  ans <- unlist(lapply(1:4000, sim_pi, n = 10000))
  print(mean(ans))
})
```

## Question 2
```{r}
# Running the code once
library(parallel)
num_cores <- detectCores() - 1

cl <- makeCluster(num_cores)

set.seed(1231)
system.time({
  ans <- unlist(parLapply(cl, 1:1, fun = sim_pi, n = 10000))
stopCluster(cl)
print(mean(ans))
})
```
### SQL
```{r}
library(RSQLite)
library(DBI)

# Initialize a temporary in memory database
con <- dbConnect(SQLite(), ":memory:")

# Download tables
film <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film.csv")
film_category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film_category.csv")
category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/category.csv")

# Copy data.frames to database
dbWriteTable(con, "film", film)
dbWriteTable(con, "film_category", film_category)
dbWriteTable(con, "category", category)
```

## Question 3
```{sql, connection=con}
SELECT f.rating, c.name AS category, COUNT(*) AS movie_count
FROM film f
INNER JOIN film_category fc ON f.film_id = fc.film_id
INNER JOIN category c ON fc.category_id = c.category_id
GROUP BY f.rating, c.name
ORDER BY f.rating, category;
```

## Question 4
```{sql, connection=con}
SELECT f.rating, 
AVG (f.replacement_cost) AS avg_replacement_cost, 
AVG (f.rental_rate) AS avg_rental_rate
FROM film f
INNER JOIN film_category fc ON f.film_id = fc.film_id
INNER JOIN category c ON fc.category_id = c.category_id
GROUP BY f.rating
ORDER BY f.rating;
```

## Question 5
```{sql, connection=con}
SELECT fc.category_id, 
COUNT(*) AS num_films
FROM film_category fc
INNER JOIN film f ON fc.film_id = f.film_id
GROUP BY fc.category_id
ORDER BY fc.category_id;
```

## Question 6
```{sql, connection=con}
SELECT c.name AS category_name,
COUNT(*) AS num_films
FROM film_category fc
INNER JOIN film f ON fc.film_id = f.film_id
INNER JOIN category c ON fc.category_id = c.category_id
GROUP BY c.category_id
ORDER BY num_films DESC
LIMIT 1;
```













